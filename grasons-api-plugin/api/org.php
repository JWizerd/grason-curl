<?php

class Org extends BaseApi 
{
    const BASE_URL = 'https://estatesales.org/api/v2/'; 
    const TYPE     = 'traditional';

    public function __construct(array $details, $images = [], $dates = [])  
    {
        $this->account     = $details['org_id'];
        $this->post        = $details['post_id'];
        $this->title       = $details['title'];
        $this->description = $details['description'];

        if (!empty($images)) {
          $this->images = $images;
        }

        if (!empty($dates)) {
          $this->format_dates($dates);
        }
        
        if (!is_null($this->account)) {        
            $this->base_query  =
              [
                'user_key'    => $this->account,
                'address'     => $details['address'],
                'city'        => $details['city'],
                'state_code'  => $details['state'],
                'postal_code' => $details['zip'],
                'type'        => $this::TYPE, 
                'timezone'    => $details['timezone']
              ];

            $this->set_api_base();
            $this->set_coordinates();
        }
    }

    protected function set_api_base() 
    {  
        $creds = $this->get_credentials('org');

        try {

            if ($creds === false) {
                throw new Exception('Org credentials do not exist. Please provide proper username and password');
            } 

            $this->api_base  = $this::BASE_URL;
            $this->set_header('Authorization', 'Basic ' . base64_encode($creds['username'] . ':' . $creds['password']));
            $this->set_header('Content-Type', 'application/x-www-form-urlencoded');

        } catch(Exception $e) {

            echo $e->getMessage();

        }
    }  

  /**
   * [for estatesales.org ONLY. Used to POST listings based 
   * from GPS coordinates to specify a specific sale/listing]
   */
    protected function set_coordinates() 
    {
        $response = $this->post_form('geocode/get', $this->base_query);

        $this->base_query['lat'] = $response->location->lat;
        $this->base_query['lon'] = $response->location->lon;
    }

  /**
   * [publish_listing on estatesales.org. You can remove a listing by 
   * firing another API request to the sale and setting publish=false]
   * @param  [int] $listing_id [id generated by post_listing() api response]
   * @return response whether listing was properly published or not
   */
  protected function display_listing($user_key, $listing_id, $show_hide) 
  {
    
    $this->post_form(
        'sale/publish/set', 
        [
          
          'user_key' => $user_key,
          'id' => $listing_id,
          'publish' => $show_hide

        ]
    );

  }

  public function hide_listing($listing_id) 
  {
    if (!is_null($this->account) && !empty($listing_id)) {
        $this->display_listing($this->account, $listing_id, 'false');
    }
  }

  /**
   * [post listing to estate sales .org api.]
   * @param $[params_arr] [<an arr containing all params to 
   * add for initial content of post. Images will come next in sequence.>]
   */
  public function create_sale() 
  {
    if (!is_null($this->account)) {
        try {
            $this->id = $this->post_sale()->sale->id;
            $this->post_images();
            $this->display_listing($this->account, $this->id, 'true'); 
        } catch (GuzzleHttp\Exception\ClientException $e) {
            return;
        }
    }
  } 

  protected function post_sale() 
  {
    $params = $this->base_query;
    $params['title'] = $this->title;
    $params['descr'] = $this->description;
    $params['dates'] = $this->dates;

    return $this->post_form('sale/set', $params);
  }

  /**
   * @param  array  Wordpress image array. Most likely 
   * a child of a parent image collection.
   * @return the id of the newly posted image
   */
  protected function post_image(array $image) 
  {
    return $this->post_form(
        'sale/photo/remote/add', 
        [
            'user_key' => $this->account,
            'sale_id' => $this->id,
            'url' => $image['url']
        ]
    );
  }

  /**
   * post every image from ACF Gallery Collection
   * @param  array  $images ACF Gallery Collection
   * @return an array newly posted image ids
   */
  protected function post_images() 
  {
    if (!empty($this->images)) {
        return array_map([$this, 'post_image'], $this->images);
    }
    return;
  }
  
  /**
   * 
   * this method can be used to query the recently created 
   * sale to check for errors. Useful for image upload errors.
   * @return response sale obj
   */
  public function get_sale($listing_id) 
  {
    $this->get(
        'sale/get', 
        [
            'user_key' => $this->user_key,
            'id'       => $listing_id
        ]
    );
  }

  /**
   * return json formatted obj of date ACFs in proper format for API
   * @param  an array of dates and times
   * @return the formatted json dates obj
   */
  protected function format_dates(array $dates) 
  {

    $formatted = [];

    foreach ($dates as $row => $date) {

      if (!empty($date['sale_date_end_time'])) {

        $formatted[$date['sale_date_picker']] = [$date['sale_date_start_time'], $date['sale_date_end_time']];  

      } else {

        $formatted[$new_date] = [$date['sale_date_start_time']];

      }

    }

    $this->dates = json_encode($formatted);

  }

}