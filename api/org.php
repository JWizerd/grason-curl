<?php

class Org extends Curl_Handler 
{

  protected $username = 'grasons';
  protected $password = 'DgR7s253iSui3yFwmwcyGqH5tGNeJb';
  protected $base_url = 'https://estatesales.org/api/v2'; 
  protected $timezone = 'US/Central';
  protected $address;
  protected $city;
  protected $postal_code;
  protected $state_code;

  public function __construct($user_key, $address, $city, $postal_code, $state_code)  {

    $this->user_key    = $user_key;
    $this->address     = $address;
    $this->city        = $city;
    $this->postal_code = $postal_code;
    $this->state_code  = $state_code;
    $this->set_base_query(
      [
        'user_key'    => $this->user_key,
        'address'     => $this->address,
        'city'        => $this->city,
        'state_code'  => $this->state_code,
        'postal_code' => $this->postal_code,
        'type'        => 'traditional'
      ]
    );

  }

  /**
   * [for estatesales.org ONLY. Used to POST listings based from GPS coordinates to specify a specific ]
   * @param  
   * @return json response 
   * https://estatesales.org/api/v2/geocode/get
   */
  public function get_coordinates() {

    $geocode_url = $this->base_url . '/geocode/get';

    return json_decode($this->request($geocode_url, $this->base_query, $this->headers));

  }

  /**
   * [set the locations coordinates from the cURL response get_coordinates()]
   */
  private function set_coordinates() {

    $coords = $this->get_coordinates();

    $this->base_query['lat'] = $coords->location->lat;
    $this->base_query['lon'] = $coords->location->lon;

  }

  protected function set_listing_id($id) {
    $this->listing_id = $id;
  }

  public function get_listing_id() {
    return $this->listing_id;
  }

  /**
   * [publish_listing on estatesales.org. You can remove a listing by firing another API request to the sale and setting publish=false]
   * @param  [int] $listing_id [id generated by post_listing() api response]
   * @return response whether listing was properly published or not
   * https://estatesales.org/api/v2/sale/publish/set
   */
  public function display_listing($user_key, $listing_id, $show_hide) {

    $url = $this->base_url . '/sale/publish/set';

    $params = [
      
      'user_key' => $user_key,
      'id' => $listing_id,
      'publish' => $show_hide

    ];
    
    $response = json_decode($this->request($url, $params, $this->headers));

  }

  public function hide_listing($post_id) {

    $info = Listing::get($post_id);
    $user_key = $info['user_key'];
    $listing_id = $info['listing_id'];
    $this->display_listing($user_key, $listing_id, 'false');

  }

  /**
   * [post listing to estate sales .org api.]
   * @param $[params_arr] [<an arr containing all params to add for initial content of post. Images will come next in sequence.>]
   * https://estatesales.org/api/v2/sale/set
   */
  public function post_listing($params_arr) {

    $url = $this->base_url . '/sale/set';

    $this->set_coordinates();

    $endpoint = $this->build_endpoint($params_arr);
    $listing = json_decode($this->request($url, $endpoint, $this->headers));

    $this->set_listing_id($listing->sale->id);
    $this->display_listing($this->user_key, $listing->sale->id, 'true');
    
  } 

  /**
   * [post an image to the estatesales.org account]
   * @return [respsone obj]
   */
  public function post_images($images_arr) {

    $url = $this->base_url . '/sale/photo/remote/add';

    if (count($images_arr) > 0) {

      foreach ($images_arr as $row => $image) {

        $params = [
          'sale_id' => $this->listing_id,
          'url' => wp_get_attachment_url($image['field_5a69fa961c0b7'])
        ];
        
        $endpoint = $this->build_endpoint($params);
        $response = json_decode($this->request($url, $endpoint, $this->headers));

      }
      
    }
  
  }
  
  /**
   * 
   * this method can be used to query the recently created sale to check for errors. Useful for image upload errors.
   * @return response sale obj
   */
  public function get_sale($listing_id) {
    $url = $this->base_url . '/sale/get';

    $endpoint = [
      'user_key' => $this->user_key,
      'id'       => $listing_id
    ];

     return json_decode($this->request($url, $endpoint, $this->headers));
  }

  /**
   * return json formatted obj of date ACFs in proper format for API
   * @param  an array of dates and times
   * @return the formatted json dates obj
   */
  public function format_dates($dates_arr) {

    $formatted = [];

    foreach ($dates_arr as $row => $date) {

      // format raw format returned from uprocessed ACF
      $format_in = 'Ymd';
      $format_out = 'Y-m-d';
      $temp_date = DateTime::createFromFormat($format_in, $date['field_5a8334c3826bc']);
      $new_date = $temp_date->format( $format_out );

      if (!empty($date['field_5a833588826bf'])) {

        $formatted[$new_date] = [$date['field_5a83356e826be'], $date['field_5a833588826bf']];  

      } else {

        $formatted[$new_date] = [$date['field_5a83356e826be']];

      }

    }

    return json_encode($formatted);

  }

}